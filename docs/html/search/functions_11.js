var searchData=
[
  ['test_5fcase_0',['test_case',['../catch__tests_8cpp.html#aed157a7a5730791bf0fdd038de0e4002',1,'TEST_CASE(&quot;A const reference wrapper to a plain function can be used to create &quot; &quot;a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aaa5926b7a638a73d2cd8dda5dd93fbdf',1,'TEST_CASE(&quot;Showing that direct constructor is not desirable.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#afebfa74bdd66974a3efdc69564fcdafe',1,'TEST_CASE(&quot;A plain function can be used to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a8d262ea0d53d82cd61940963d688bc90',1,'TEST_CASE(&quot;A plain-function-based scope_guard executes the function exactly &quot; &quot;once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4c4f67455e5502ccc10df7c0d271e236',1,'TEST_CASE(&quot;A non-const, plain-function-based scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ad88b084f8a8cc7d3ec39388029c6ca24',1,'TEST_CASE(&quot;A dismissed plain-function-based scope_guard does not execute its &quot; &quot;callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a5cda2fb8f89a39925b5eb45a69a9a045',1,'TEST_CASE(&quot;An lvalue reference to a plain function can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a6e64a1aa719f129823dd679fa0cc5247',1,'TEST_CASE(&quot;An lvalue-reference-to-plain-function-based scope_guard executes &quot; &quot;the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ad161af651612dd27032f21891efbef23',1,'TEST_CASE(&quot;A non-const, lvalue-reference-to-plain-function-based scope_guard &quot; &quot;can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a797d7d9b722f4cfbe97a1a5f45b95bcd',1,'TEST_CASE(&quot;A dismissed lvalue-reference-to-plain-function-based scope_guard &quot; &quot;does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a3e8b05cb285d71fefda0eb90bdf03c86',1,'TEST_CASE(&quot;An lvalue const reference to a plain function can be used to create &quot; &quot;a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a8dd899b22afcc9104316388a1b7eed80',1,'TEST_CASE(&quot;An lvalue-const-reference-to-plain-function-based scope_guard &quot; &quot;executes the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#af471f9c331f527bcf07bc3fca5e402f7',1,'TEST_CASE(&quot;A non-const, lvalue-const-reference-to-plain-function-based &quot; &quot;scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a3f564f95baee8bbe7f0428e9cc5e0c6e',1,'TEST_CASE(&quot;A dismissed lvalue-const-reference-to-plain-function-based &quot; &quot;scope_guard does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a0a4685a80519ce769f643bd714b3e21b',1,'TEST_CASE(&quot;An rvalue reference to a plain function can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aeb3dc42fefbb45618f90fddac0f9e8d8',1,'TEST_CASE(&quot;An rvalue-reference-to-plain-function-based scope_guard executes &quot; &quot;the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ab20d01513d87203423cd78596653b3af',1,'TEST_CASE(&quot;A non-const, rvalue-reference-to-plain-function-based scope_guard &quot; &quot;can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a6a3804b81b8a929be4dcfb12c7941727',1,'TEST_CASE(&quot;A dismissed rvalue-reference-to-plain-function-based scope_guard &quot; &quot;does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a6c176454d50464583ee7ed81f237fb49',1,'TEST_CASE(&quot;A reference wrapper to a plain function can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a39b022cafcd6cb6a3d6d5af817f0d256',1,'TEST_CASE(&quot;A reference-wrapper-to-plain-function-based scope_guard executes &quot; &quot;the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aa4301f03d64f6635549ddf3becb4b9ae',1,'TEST_CASE(&quot;A non-const, reference-wrapper-to-plain-function-based scope_guard &quot; &quot;can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a46c24ebbe1d37f7aa1a35290c0cb6aed',1,'TEST_CASE(&quot;A dismissed reference-wrapper-to-plain-function-based scope_guard &quot; &quot;does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aaffbdabc03d3017593f7e06517252940',1,'TEST_CASE(&quot;A non-const scope_guard that is created with a &quot; &quot;regular-function-wrapping lvalue std::function can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a2fd9a8cf70a55e8e2ef8292b56484e1c',1,'TEST_CASE(&quot;A const-reference-wrapper-to-plain-function-based scope_guard &quot; &quot;executes the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ab6b53fb7e4d383b95c0157f1423ac7b7',1,'TEST_CASE(&quot;A non-const, const-reference-wrapper-to-plain-function-based &quot; &quot;scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac78d143978c095d4c4a47549a2fc8ba0',1,'TEST_CASE(&quot;A dismissed const-reference-wrapper-to-plain-function-based &quot; &quot;scope_guard does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#afc5b88059c66b7024a5600be4895a574',1,'TEST_CASE(&quot;An lvalue plain function pointer can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae45f2e4b38a83893812dd67a5056731d',1,'TEST_CASE(&quot;An lvalue-plain-function-pointer-based scope_guard executes the &quot; &quot;function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a576a8b81c5c0ef480e77b013c821da84',1,'TEST_CASE(&quot;A non-const, lvalue-plain-function-pointer-based scope_guard can be &quot; &quot;dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ad419a3dcdfe99fc014bb836395e1c898',1,'TEST_CASE(&quot;A dismissed lvalue-plain-function-pointer-based scope_guard does &quot; &quot;not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#afe399bc02e12b3c4e7c3375f219946ca',1,'TEST_CASE(&quot;An rvalue plain function pointer can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac0d6f15ee8739b49d39a7555b6b03eb9',1,'TEST_CASE(&quot;An rvalue-plain-function-pointer-based scope_guard executes the &quot; &quot;function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#afc77ed87c068d65cce01c728f7a803b1',1,'TEST_CASE(&quot;A non-const, rvalue-plain-function-pointer-based scope_guard can be &quot; &quot;dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a1796d23f15e71593bc1221ca6fe92502',1,'TEST_CASE(&quot;A dismissed rvalue-plain-function-pointer-based scope_guard does &quot; &quot;not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a683fd3eb9e020d46c0ce17b5be2f20e5',1,'TEST_CASE(&quot;An lvalue reference to a plain function pointer can be used to &quot; &quot;create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a3d0353f0f3c7bba3d6cd57421038cc3e',1,'TEST_CASE(&quot;A plain-function-pointer-lvalue-reference-based scope_guard &quot; &quot;executes the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac494a866451566fce5e42c0031b5cc1b',1,'TEST_CASE(&quot;A non-const, plain-function-pointer-lvalue-reference-based &quot; &quot;scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#adbfe1c1d56dd5bd73d98ae55ae1b4783',1,'TEST_CASE(&quot;A dismissed plain-function-pointer-lvalue-reference-based &quot; &quot;scope_guard does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a3850bd30c8482511148da26e2f43ae34',1,'TEST_CASE(&quot;An rvalue reference to a plain function pointer can be used to &quot; &quot;create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#adf395a0eae162d86dbe40bdf70a42cf7',1,'TEST_CASE(&quot;A plain-function-pointer-rvalue-reference-based scope_guard &quot; &quot;executes the function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a04886fe01c8bb52dc39421b0adb930ee',1,'TEST_CASE(&quot;A non-const, plain-function-pointer-rvalue-reference-based &quot; &quot;scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a334b0cde7237131a4a251b9320012f6e',1,'TEST_CASE(&quot;A dismissed plain-function-pointer-rvalue-reference-based &quot; &quot;scope_guard does not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#acbeb4cc8afab4b0f2432642a0a29e6a1',1,'TEST_CASE(&quot;An lvalue std::function that wraps a regular function can be used &quot; &quot;to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aaca33919a0ca4f46f345fd7b205323e6',1,'TEST_CASE(&quot;A scope_guard that is created with a &quot; &quot;regular-function-wrapping lvalue std::function executes that &quot; &quot;std::function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#af70f7c6103528991547c96e5f6a73908',1,'TEST_CASE(&quot;Test rollback due to return&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a480b98fdc4c7803cb84355194290ec1d',1,'TEST_CASE(&quot;A dismissed scope_guard that was created with a &quot; &quot;regular-function-wrapping lvalue std::function does not execute its &quot; &quot;callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a2898a15832af489fb09f2b7a919eccb6',1,'TEST_CASE(&quot;An rvalue std::function that wraps a regular function can be used &quot; &quot;to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a452b011c6f5e33df46b52993e824dc63',1,'TEST_CASE(&quot;A scope_guard that is created with an &quot; &quot;regular-function-wrapping rvalue std::function executes that &quot; &quot;std::function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a572a3139a61056f8920970d6b37739d9',1,'TEST_CASE(&quot;A non-const scope_guard that is created with an &quot; &quot;regular-function-wrapping rvalue std::function can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae3d624dfd1d9c47ec5d25f8965a1652d',1,'TEST_CASE(&quot;A dismissed scope_guard that was created with an &quot; &quot;regular-function-wrapping rvalue std::function does not execute its &quot; &quot;callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a256f1cad6e73df1698d738d5b3a742af',1,'TEST_CASE(&quot;An lvalue reference to a std::function that wraps a regular &quot; &quot;function can be used to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aa84526d158fde15542c489819a5ce016',1,'TEST_CASE(&quot;A scope_guard that is created with a &quot; &quot;regular-function-wrapping std::function lvalue reference &quot; &quot;executes that std::function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a2333651d6f4cee1857e958ee81c765f6',1,'TEST_CASE(&quot;A non-const scope_guard that was created with a &quot; &quot;regular-function-wrapping std::function lvalue reference can be &quot; &quot;dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#adfe84cf291f6cb53f491fd9ba8a8f012',1,'TEST_CASE(&quot;A dismissed scope_guard that was created with a &quot; &quot;regular-function-wrapping std::function lvalue reference does not &quot; &quot;execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#acd7a6fb7f850c943773cd2be7a6c796a',1,'TEST_CASE(&quot;An rvalue reference to a std::function that wraps a regular &quot; &quot;function can be used to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4e265de4814f59825e26d627b53abf98',1,'TEST_CASE(&quot;A scope_guard that is created with an &quot; &quot;regular-function-wrapping std::function rvalue reference&quot; &quot;executes that std::function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#af815f8cace32fab853743bfe1f711385',1,'TEST_CASE(&quot;A non-const scope_guard that is created with a &quot; &quot;regular-function-wrapping std::function rvalue reference can be &quot; &quot;dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a838ab1b1e484fc3cf88e1f0a9e8b8bbe',1,'TEST_CASE(&quot;A dismissed scope_guard that was created with a &quot; &quot;regular-function-wrapping std::function rvalue reference does not &quot; &quot;execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a1138f06176edbc65286354f33a1a8c2a',1,'TEST_CASE(&quot;A lambda function with no capture can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a786f120b4fb15398727a38ebad9fbc83',1,'TEST_CASE(&quot;A no-capture-lambda-based scope_guard executes the lambda exactly &quot; &quot;once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aa27c632c3ee327ce269e61ae0ceb5379',1,'TEST_CASE(&quot;A non-const, no-capture-lambda-based scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a3c02eca6bf8d13426de2e9815886972d',1,'TEST_CASE(&quot;A dismissed no-capture-lambda-based scope_guard does not execute &quot; &quot;its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#abeb843a236a7b5f5a6349ab2f36dcb33',1,'TEST_CASE(&quot;A lambda function with capture can be used to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ad3ab6f943287501e550cdbb121516509',1,'TEST_CASE(&quot;A capturing-lambda-based scope_guard executes the lambda when &quot; &quot;leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#abc3d5a9fae5a82a536bac3e668f77eff',1,'TEST_CASE(&quot;A non-const, capturing-lambda-based scope_guard can be dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ab21c9ab8f86ea152edb3f35f973292f3',1,'TEST_CASE(&quot;A dismissed capturing-lambda-based scope_guard does not execute its &quot; &quot;callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a8ae4f130c477df6c3bf7f80c8047e55e',1,'TEST_CASE(&quot;A const lambda function with capture can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a0c58f77eeeb59d413118be3dec7e1862',1,'TEST_CASE(&quot;A const-capturing-lambda-based scope_guard executes the lambda when &quot; &quot;leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a69a4498495143a3cfcff92c37115445b',1,'TEST_CASE(&quot;A non-const, const-capturing-lambda-based scope_guard can be &quot; &quot;dismissed.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a87cbf0c6fa8a8799338686f7cdf49d42',1,'TEST_CASE(&quot;A dismissed const-capturing-lambda-based scope_guard does not &quot; &quot;execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#acb5f0878d13de3a7456a9cda11b769f5',1,'TEST_CASE(&quot;A scope_guard created with a regular-function-calling lambda, &quot; &quot;calls the lambda exactly once when leaving scope, which in turn &quot; &quot;calls the regular function.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aece97fa4fd4ebae36ece7caf4c021b22',1,'TEST_CASE(&quot;A dismissed scope_guard that was created with a &quot; &quot;regular-function-calling lambda, does not execute its callback at &quot; &quot;all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#afaa464c242c648d17c51a5a16d035243',1,'TEST_CASE(&quot;A lambda function calling a std::function can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a28983f8e17f1c9fc6bfcb179a5dbb855',1,'TEST_CASE(&quot;A scope_guard created with a std::function-calling lambda calls &quot; &quot;the lambda exactly once when leaving scope, which in turn calls the &quot; &quot;std::function.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#afdc31af9f79d89929565530698290c11',1,'TEST_CASE(&quot;A std::function wrapping a lambda function can be used to create a &quot; &quot;scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae3e7109dd5b8b7e3b48482c737f5f54d',1,'TEST_CASE(&quot;A scope_guard created with a lambda-wrapping std::function calls &quot; &quot;the std::function exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a2d620409db3f372a8dc16814d475a4ed',1,'TEST_CASE(&quot;A bound function can be used to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae7f9b8a82983bba233992bc4d7d2140c',1,'TEST_CASE(&quot;A bound-function-based scope_guard calls the bound function exactly &quot; &quot;once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a94654a0600adc9897bcbdce6ecbb50d7',1,'TEST_CASE(&quot;A dismissed bound-function-based scope_guard does not execute its &quot; &quot;callback at all&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a20b24e34a259176f48792f0663cb5a13',1,'TEST_CASE(&quot;A bound lambda can be used to create a scope_guard.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a9a3302fc576e45fcde0923af2d774f5e',1,'TEST_CASE(&quot;A bound-lambda-based scope_guard calls the bound lambda exactly &quot; &quot;once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aeb9f15fa6f9e7d2c21a4f853c6ce9d30',1,'TEST_CASE(&quot;A stateless custom functor can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a8231e172c6967572e2217da1811035fb',1,'TEST_CASE(&quot;A stateless-custom-functor-based scope_guard calls the functor &quot; &quot;exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a5bb502e4c8d4b2cf88fd9f6ac78000ae',1,'TEST_CASE(&quot;A stateful custom functor can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a278130a74687a9c8992605944e567585',1,'TEST_CASE(&quot;A stateful-custom-functor-based scope_guard calls the functor &quot; &quot;exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a717cd2d4700adc17e5332b35a7975289',1,'TEST_CASE(&quot;A const custom functor can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aa8f6d748bf99eaf9661767b9da2df9be',1,'TEST_CASE(&quot;A const-custom-functor-based scope_guard calls the functor &quot; &quot;exactly once when leaving scope.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a5f6f5f35371743a6963550c94f689ae0',1,'TEST_CASE(&quot;An lvalue reference to a noncopyable and nonmovable functor can be &quot; &quot;used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a1f211abdce95e917a6f2f22dea26f908',1,'TEST_CASE(&quot;A scope_guard created with an lvalue reference to a noncopyable and &quot; &quot;nonmovable functor calls the functor exactly once when leaving &quot; &quot;scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae69432a06e2d63f8446d66e2a9f134a4',1,'TEST_CASE(&quot;A dismissed scope_guard that was created with an lvalue reference &quot; &quot;to a noncopyable and nonmovable functor does not execute its &quot; &quot;callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a937d57e97a5e10656ff73fe618f593f1',1,'TEST_CASE(&quot;An lvalue noncopyable and nonmovable functor can be used to create &quot; &quot;a scope_guard, because it binds to an lvalue reference&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a77908ad4866fc68a6931cb2b06c98c0c',1,'TEST_CASE(&quot;A scope_guard created with an lvalue noncopyable and nonmovable &quot; &quot;functor calls the functor exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a540d2b50bd4ee0516d9fcf53a1fb9657',1,'TEST_CASE(&quot;A const lvalue noncopyable and nonmovable functor can be used to &quot; &quot;create a scope_guard, provided its operator() is const, because it &quot; &quot;binds to a const lvalue reference&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a97cbb1bc00828f9a2bd006b432939eaf',1,'TEST_CASE(&quot;A scope_guard created with a const lvalue noncopyable and &quot; &quot;nonmovable functor calls the functor exactly once when leaving &quot; &quot;scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4e5fa0309f38b200af82d5bc595e7807',1,'TEST_CASE(&quot;Redundant scope_guards do not interfere with each other - their &quot; &quot;combined post-condition holds.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aac45d8fe18546013d6b0296405d3a8d5',1,'TEST_CASE(&quot;A lambda-wrapped regular method can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a49a4be2c2f526a026eeb234166475883',1,'TEST_CASE(&quot;A lambda-wrapped-regular-method-based scope_guard executes the &quot; &quot;method exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4d81e025682a025fa157b7000ecfbdf1',1,'TEST_CASE(&quot;A dismissed lambda-wrapped-regular-method-based scope_guard does &quot; &quot;not execute its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#acb2c39502bb7f7e55ce1a6611398a0cc',1,'TEST_CASE(&quot;A bound regular method can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a8fa8ecd3cca0da08106ac5487d3f9a01',1,'TEST_CASE(&quot;A bound-regular-method-based scope_guard executes the method &quot; &quot;exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a020e88eb77da38d8cc7ea624c12d3dd8',1,'TEST_CASE(&quot;A lambda-wrapped const method can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a76d6e736eda7714fbe8e8665aa2922fb',1,'TEST_CASE(&quot;A lambda-wrapped-const-method-based scope_guard executes the &quot; &quot;method exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a787c0cfce20368677a64fc106742b15f',1,'TEST_CASE(&quot;A bound const method can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4abfcd7ee7f5e9f8b4c9c5cbdb2a2db6',1,'TEST_CASE(&quot;A bound-const-method-based scope_guard executes the method &quot; &quot;exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a89e008923db8919a490313a302e14290',1,'TEST_CASE(&quot;A dismissed, bound-const-method-based scope_guard does not execute &quot; &quot;its callback at all.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a59ce53e715811f58f7d35067c12e195c',1,'TEST_CASE(&quot;A static method can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac06818e20870691497827b872cb3fb9c',1,'TEST_CASE(&quot;A static-method-based scope_guard executes the static method &quot; &quot;exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a48bb39b85343512d6272be53bd8492ea',1,'TEST_CASE(&quot;A lambda-wrapped virtual method can be used to create a scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a12787a0909852fc91652cb0b4ff4674b',1,'TEST_CASE(&quot;A lambda-wrapped-virtual-method-based scope_guard executes the &quot; &quot;virtual method exactly once when leaving scope&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ad6bf41174f897ba597e7d0006c9f751d',1,'TEST_CASE(&quot;Example usage relying on SFINAE-friendliness&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4e9546d66ce9d52e0269a5b6b74a8b6a',1,'TEST_CASE(&quot;The SFINAE testing tool creates a make_scope_guard, preferentially &quot; &quot;using the provided parameter, if possible, but discarding it &quot; &quot;otherwise - tests tool used in other tests&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae8b098bcaeb58f7a44320b29b1265809',1,'TEST_CASE(&quot;When deducing make_scope_guard&apos;s callback type, a substitution &quot; &quot;failure caused by a non-callable can be recovered-from without a &quot; &quot;compilation error&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#abf7f59f5fa8669ed8c75f2db517b2b6f',1,'TEST_CASE(&quot;When deducing make_scope_guard&apos;s callback type, a substitution &quot; &quot;failure caused by a callable that takes arguments can be recovered &quot; &quot;from without a compilation error&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#aa22f79626f937846b99e58fb9292c05a',1,'TEST_CASE(&quot;When deducing make_scope_guard&apos;s callback type, a substitution &quot; &quot;failure caused by a callable that returns non-void can be recovered &quot; &quot;from without a compilation error&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a13ad8d6602186fe9d15e0d457a257a3d',1,'TEST_CASE(&quot;When deducing make_scope_guard&apos;s callback type,  substitution &quot; &quot;failure caused by a callable that is not noexcept-destructible can &quot; &quot;be recovered-from without a compilation error&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a0d2ec84301f51799871b5620d7241f25',1,'TEST_CASE(&quot;Multiple independent scope_guards do not interfere with each &quot; &quot;other - each of their post-conditions hold.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#af65ff9907a71e76036a9bee731b9b98c',1,'TEST_CASE(&quot;Test nested scopes&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#af757c4a2ab9553800b291e7b763785d5',1,'TEST_CASE(&quot;Dismissing a scope_guard multiple times is the same as dismissing it&quot; &quot;only once&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a4d6ee47ee92c7212bc0c99260659a2a4',1,'TEST_CASE(&quot;scope_guards execute their callback exactly once when leaving &quot; &quot;scope due to an exception&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac03bbdc8e00307540c41133a0a646939',1,'TEST_CASE(&quot;dismissed scope_guards do not execute their callback when leaving &quot; &quot;scope due to an exception&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a7e46a02af55acc2b5e8fea993abd2f9b',1,'TEST_CASE(&quot;scope_guards execute their callback exactly once when leaving &quot; &quot;scope due to a return&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a20a8d634419b5dce9097660a9a88a98b',1,'TEST_CASE(&quot;dismissed scope_guards do not execute their callback when leaving &quot; &quot;scope due to a return.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac3aefa791ea2d0296facfbbba2a268da',1,'TEST_CASE(&quot;When a scope_guard is move-constructed, the original callback is &quot; &quot;executed only once, by the destination scope_guard (the source&quot; &quot;scope_guard does not call it)&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ac73b2a16298c35993132121c2ebd69b4',1,'TEST_CASE(&quot;When a scope_guard is move-constructed from a dismissed guard, none &quot; &quot;of the guards execute their callback&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a63a54972edcac0ad581c63f4b2b8c843',1,'TEST_CASE(&quot;Dismissing a moved-from scope_guard is valid, but has no effect.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae035d4cf9e10b2e6c66e648a079501dd',1,'TEST_CASE(&quot;A dismissed moved-to scope_guard does not execute its callback&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a491b92a77781d5945c24922b1b739241',1,'TEST_CASE(&quot;A scope_guard that is moved from does not call its callback when &quot; &quot;leaving scope, but the scope_guard that was moved into, does.&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#a392f8eeee962b1d2556569eb6b07fc82',1,'TEST_CASE(&quot;A scope_guard that is moved into a container does not call its &quot; &quot;callback when leaving scope; the callback is called when the &quot; &quot;corresponding container element is destroyed&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#acf98d88ad90051aca995d904600093a8',1,'TEST_CASE(&quot;Callbacks that are used to make scope_guards can be called &quot; &quot;independently without affecting the behavior of the scope_guard&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#ae676fc01e9067c1e9572004c57d63572',1,'TEST_CASE(&quot;Test custom rollback&quot;):&#160;catch_tests.cpp'],['../catch__tests_8cpp.html#acf670a268cc25bb320757123e921e718',1,'TEST_CASE(&quot;Test rollback due to exception&quot;):&#160;catch_tests.cpp']]],
  ['th_5fcomment_5fadd_1',['th_comment_add',['../theora_2codec_8h.html#a19a1f7b8032db957df151a34e5ac9272',1,'codec.h']]],
  ['th_5fcomment_5fadd_5ftag_2',['th_comment_add_tag',['../theora_2codec_8h.html#a6c5edc201ca220a30787ca6c1ddcaeaf',1,'codec.h']]],
  ['th_5fcomment_5fclear_3',['th_comment_clear',['../theora_2codec_8h.html#ae736c1afa514947a3feb223143af95e3',1,'codec.h']]],
  ['th_5fcomment_5finit_4',['th_comment_init',['../theora_2codec_8h.html#a6c8ab25988e7ea9d7b1e31a54cf58f09',1,'codec.h']]],
  ['th_5fcomment_5fquery_5',['th_comment_query',['../theora_2codec_8h.html#a5d52639d33e08d487f6ad9c5dce9a11b',1,'codec.h']]],
  ['th_5fcomment_5fquery_5fcount_6',['th_comment_query_count',['../theora_2codec_8h.html#a81d518dc4426f63ceaedcbe2668679fc',1,'codec.h']]],
  ['th_5fdecode_5falloc_7',['th_decode_alloc',['../theoradec_8h.html#a81888d90a9654eec3878706bd8605898',1,'theoradec.h']]],
  ['th_5fdecode_5fctl_8',['th_decode_ctl',['../theoradec_8h.html#a1a8051958d75b1012573b6e3c8f670e1',1,'theoradec.h']]],
  ['th_5fdecode_5ffree_9',['th_decode_free',['../theoradec_8h.html#afb6684ad8ba507b71112bc9de148e7d0',1,'theoradec.h']]],
  ['th_5fdecode_5fheaderin_10',['th_decode_headerin',['../theoradec_8h.html#a006d01d36fbe64768c571e6a12b7fc50',1,'theoradec.h']]],
  ['th_5fdecode_5fpacketin_11',['th_decode_packetin',['../theoradec_8h.html#a31c814bf09b2232aff69c57ae20f04eb',1,'theoradec.h']]],
  ['th_5fdecode_5fycbcr_5fout_12',['th_decode_ycbcr_out',['../theoradec_8h.html#aa9cc8af63fa8540e0fc95572f259cdcb',1,'theoradec.h']]],
  ['th_5fgranule_5fframe_13',['th_granule_frame',['../theora_2codec_8h.html#a95b10e76fc4c05d0240ea2dfd9fd62bd',1,'codec.h']]],
  ['th_5fgranule_5ftime_14',['th_granule_time',['../theora_2codec_8h.html#a707e1e281de788af0df39ef00f3fb432',1,'codec.h']]],
  ['th_5finfo_5fclear_15',['th_info_clear',['../theora_2codec_8h.html#ab3d6441ab4a4969859ef5fd78a9e3c1c',1,'codec.h']]],
  ['th_5finfo_5finit_16',['th_info_init',['../theora_2codec_8h.html#a430d9c605816a6ca0bdce3a0b965b926',1,'codec.h']]],
  ['th_5fpacket_5fisheader_17',['th_packet_isheader',['../theora_2codec_8h.html#a02f3f38261a9b39452d8a5e6f8737cc1',1,'codec.h']]],
  ['th_5fpacket_5fiskeyframe_18',['th_packet_iskeyframe',['../theora_2codec_8h.html#afe95cfd06f0fef413266c9168a66248a',1,'codec.h']]],
  ['th_5fsetup_5ffree_19',['th_setup_free',['../theoradec_8h.html#adef55431b68aaa59d0d7b32b2f118f27',1,'theoradec.h']]],
  ['th_5fversion_5fnumber_20',['th_version_number',['../theora_2codec_8h.html#ab723a75c0f95b3eb817f7f769846016b',1,'codec.h']]],
  ['th_5fversion_5fstring_21',['th_version_string',['../theora_2codec_8h.html#a57a0637587e6f78a718d03c927f2c9fd',1,'codec.h']]],
  ['theora_5fclear_22',['theora_clear',['../theora_8h.html#ab252d5d81b925136dda72e8f1c09c5eb',1,'theora.h']]],
  ['theora_5fcomment_5fadd_23',['theora_comment_add',['../theora_8h.html#a650642ed23894e41109bbc42ec393ed4',1,'theora.h']]],
  ['theora_5fcomment_5fadd_5ftag_24',['theora_comment_add_tag',['../theora_8h.html#a339bd80b5bf4bb168b7052d8ec0b5a92',1,'theora.h']]],
  ['theora_5fcomment_5fclear_25',['theora_comment_clear',['../theora_8h.html#a04c07c2eefba3a433e43f9fbde14719f',1,'theora.h']]],
  ['theora_5fcomment_5finit_26',['theora_comment_init',['../theora_8h.html#a811b92785df3bdbbebb3de612d9d6ce0',1,'theora.h']]],
  ['theora_5fcomment_5fquery_27',['theora_comment_query',['../theora_8h.html#ac9e0e9ad7e6d3b76129f9660bcad5ebd',1,'theora.h']]],
  ['theora_5fcomment_5fquery_5fcount_28',['theora_comment_query_count',['../theora_8h.html#a10f66a3c752442a3e0c0098e0f88df8b',1,'theora.h']]],
  ['theora_5fcontrol_29',['theora_control',['../theora_8h.html#a186773db3bc8cd550047e7df1b2ba2c9',1,'theora.h']]],
  ['theora_5fdecode_5fheader_30',['theora_decode_header',['../theora_8h.html#a02915e63c1bd733ee291f577a8b75a82',1,'theora.h']]],
  ['theora_5fdecode_5finit_31',['theora_decode_init',['../theora_8h.html#a264907c66003799ff77ecbd09eb33d2c',1,'theora.h']]],
  ['theora_5fdecode_5fpacketin_32',['theora_decode_packetin',['../theora_8h.html#aa65a9e53b46fd54ab344bd599fa96975',1,'theora.h']]],
  ['theora_5fdecode_5fyuvout_33',['theora_decode_YUVout',['../theora_8h.html#a09d47c80e1e94bff0a46a496816b8daa',1,'theora.h']]],
  ['theora_5fencode_5fcomment_34',['theora_encode_comment',['../theora_8h.html#a45e8db0713eaaca0f1144f3724cb834a',1,'theora.h']]],
  ['theora_5fencode_5fheader_35',['theora_encode_header',['../theora_8h.html#a451feb58d6bde726edbae193689887be',1,'theora.h']]],
  ['theora_5fencode_5finit_36',['theora_encode_init',['../theora_8h.html#a0f7ad4d4b2343278cb4ba8fb2bd5109a',1,'theora.h']]],
  ['theora_5fencode_5fpacketout_37',['theora_encode_packetout',['../theora_8h.html#a5f4929677a735bc2198c2309d235f1b3',1,'theora.h']]],
  ['theora_5fencode_5ftables_38',['theora_encode_tables',['../theora_8h.html#a5085baf20855b283fa01fc948505d9d2',1,'theora.h']]],
  ['theora_5fencode_5fyuvin_39',['theora_encode_YUVin',['../theora_8h.html#ac0d33d896ca70cedfc94c5986d947078',1,'theora.h']]],
  ['theora_5fgranule_5fframe_40',['theora_granule_frame',['../theora_8h.html#a7bfa3ceb2fb4b41a282456c56e1dd269',1,'theora.h']]],
  ['theora_5fgranule_5fshift_41',['theora_granule_shift',['../theora_8h.html#acd9360e6a47139c761002410af457a02',1,'theora.h']]],
  ['theora_5fgranule_5ftime_42',['theora_granule_time',['../theora_8h.html#a4376358b12b9fa23ce6fe21cb5c65ac6',1,'theora.h']]],
  ['theora_5finfo_5fclear_43',['theora_info_clear',['../theora_8h.html#aba7022d58edbc4825cacad03f68b3e0d',1,'theora.h']]],
  ['theora_5finfo_5finit_44',['theora_info_init',['../theora_8h.html#a3091c87d48f1faba018c5956379a6d90',1,'theora.h']]],
  ['theora_5fpacket_5fisheader_45',['theora_packet_isheader',['../theora_8h.html#ab969f9d0407683f0e5abe73d0839a25b',1,'theora.h']]],
  ['theora_5fpacket_5fiskeyframe_46',['theora_packet_iskeyframe',['../theora_8h.html#a39ccc8f847a748d7074c926b4fdd12b2',1,'theora.h']]],
  ['theora_5fversion_5fnumber_47',['theora_version_number',['../theora_8h.html#ad181f4b19d455dcc2bef2533530b84c8',1,'theora.h']]],
  ['theora_5fversion_5fstring_48',['theora_version_string',['../theora_8h.html#ac52e77d5dab481f2181c8162549c0cb9',1,'theora.h']]],
  ['think_49',['think',['../class_discover.html#a0d51690385613bc5c11e718d99b085c1',1,'Discover']]]
];
